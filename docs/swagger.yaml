basePath: /api/v1
definitions:
  apiresponse.ErrorResponse:
    properties:
      error:
        example: validation_error
        type: string
      message:
        example: Operation completed successfully
        type: string
      status:
        example: true
        type: boolean
    type: object
  apiresponse.SuccessResponse:
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      status:
        example: true
        type: boolean
    type: object
  models.Client:
    properties:
      client_name:
        type: string
      client_secret:
        type: string
      created_at:
        type: string
      id:
        type: integer
      schema_name:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.ClientUser:
    properties:
      created_at:
        type: string
      email:
        example: john@example.com
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        example: john_doe
        type: string
    type: object
  models.ClientUserLoginRequest:
    properties:
      client_secret:
        example: asdadsdasdsadasd
        type: string
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - client_secret
    - password
    - username
    type: object
  models.CreateClient:
    properties:
      client_name:
        type: string
    required:
    - client_name
    type: object
  models.CreateClientReponse:
    properties:
      client_secret:
        type: string
    required:
    - client_secret
    type: object
  models.CreateClientUser:
    properties:
      client_id:
        example: 0
        type: integer
      email:
        example: john@example.com
        maxLength: 100
        type: string
      password:
        example: password123
        maxLength: 100
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - client_id
    - email
    - password
    - username
    type: object
  models.CreateUser:
    properties:
      email:
        example: john@example.com
        maxLength: 100
        type: string
      password:
        example: password123
        maxLength: 100
        minLength: 8
        type: string
      username:
        example: john_doe
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.CreateUserResponse:
    properties:
      email:
        example: john@example.com
        type: string
      userId:
        example: 1
        type: integer
      username:
        example: john_doe
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        example: password123
        type: string
      username:
        example: john_doe
        type: string
    required:
    - password
    - username
    type: object
  models.LoginResponse:
    properties:
      expiresAt:
        example: "2023-01-02T00:00:00Z"
        type: string
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
      user:
        $ref: '#/definitions/models.UserInfo'
    type: object
  models.UserInfo:
    properties:
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      username:
        example: john_doe
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A simple JWT authentication service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SimpleJWT API
  version: "1.0"
paths:
  /client/userlogin:
    post:
      consumes:
      - application/json
      description: Authenticate and login a client user with username/password
      parameters:
      - description: User login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.ClientUserLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/apiresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.LoginResponse'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "404":
          description: Client not found
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
      summary: Authenticate a client user
      tags:
      - Client
  /createUser:
    post:
      consumes:
      - application/json
      description: Create a new user account in the system
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.CreateUserResponse'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "409":
          description: Conflict - username or email already exists
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
      summary: Create a new user
      tags:
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/apiresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.LoginResponse'
              type: object
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "401":
          description: Invalid credentials
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
      summary: User login
      tags:
      - auth
  /ping:
    get:
      consumes:
      - application/json
      description: Ping endpoint to check if the service is running
      produces:
      - application/json
      responses:
        "200":
          description: Service status response
          schema:
            additionalProperties: true
            type: object
      summary: Health check endpoint
      tags:
      - health
  /protected/createClient:
    post:
      consumes:
      - application/json
      description: Create a new user account in the system
      parameters:
      - description: Client creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateClient'
      produces:
      - application/json
      responses:
        "201":
          description: Client created successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.CreateClientReponse'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "409":
          description: Conflict - client name already exists
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - Client
  /protected/createClientUser:
    post:
      consumes:
      - application/json
      description: Create and add a new user account to the client
      parameters:
      - description: User creation data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateClientUser'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/apiresponse.SuccessResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.ClientUser'
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "409":
          description: Conflict - username or email already exists
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new ClientUser
      tags:
      - Client
  /protected/getAllClients:
    get:
      consumes:
      - application/json
      description: Retrieve all clients belonging to the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all clients
          schema:
            allOf:
            - $ref: '#/definitions/apiresponse.SuccessResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Client'
                  type: array
              type: object
        "400":
          description: Bad request - validation error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "401":
          description: Unauthorized - invalid user
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "404":
          description: No clients found
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/apiresponse.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clients associated with the user
      tags:
      - Client
  /protected/test:
    get:
      consumes:
      - application/json
      description: Returns a success response if JWT is valid
      produces:
      - application/json
      responses:
        "200":
          description: Test successful
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Test endpoint
      tags:
      - Protected
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
